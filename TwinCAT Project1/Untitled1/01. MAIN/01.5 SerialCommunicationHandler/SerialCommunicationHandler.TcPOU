<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="SerialCommunicationHandler" Id="{a12e14a2-3147-4be8-a768-485775d9f2f3}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Based on SerialCom_InfoSys_Sample1 (v2.0)
This sample sends and receives a string via serial communication.
Three hardware interfaces are used: Pc COM port, EL terminal, KL terminal
*)
PROGRAM SerialCommunicationHandler
VAR
	//fbEL6001	: FB_SerialCom;
	
	fbAsciiComm: FB_SerialCom;
	

	ReceiveStep: INT;
	ProcessVariableRead : BOOL;
	SetpointRead : BOOL;
	ProcessVariableReceived : BOOL;
	SetpointReceived : BOOL;
	SendStep: INT;
	pumpPressureStartSend: BOOL;
	start3: BOOL;
	received3: BOOL;
	start4: BOOL;
	received4: BOOL;
	Setpoint: STRING;
	
	fbUpdatePressureSetpoint: FB_UpdateSetpoint;
	pumpingPressureMeasurement: DINT;
	pumpingPressureSetpoint: DINT;
	pumpingPressureSetSetpoint: DINT;
	pumpingPressureSetSetpointPrev: DINT;
	tonMessageUpdate: TON;
	rTrigMessageNotUpdated: R_TRIG;
	OutputPowerRead: BOOL;
	OutputPowerReceived: BOOL;
	pumpingPressureOutputPower: DINT;
	testi: BOOL;
	flowMeasurement: DINT;
	preHeaterTemperatureMeasurement: DINT;
	preHeaterTemperatureSetpoint: DINT;
	preHeaterTemperatureOutputPower: DINT;
	fbUpdatePreHeaterTemperatureSetpoint: FB_UpdateSetpoint;
	preHeaterTemperatureSetSetpoint: DINT;
	preHeaterTemperatureSetSetpointPrev: DINT;
	preHeaterTemperatureStartSend: BOOL;
	separatorTemperatureMeasurement: DINT;
	separatorTemperatureSetpoint: DINT;
	separatorTemperatureOutputPower: DINT;
	fbUpdateSeparatorTemperatureSetpoint: FB_UpdateSetpoint;
	separatorTemperatureStartSend: BOOL;
	separatorTemperatureSetSetpoint: DINT;
	separatorTemperatureSetSetpointPrev: DINT;
	
	pumpingPressureSentSetpoint : DINT;
	ReactorPressureSetpoint: DINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Data exchange from/to terminal
fbAsciiComm(TxBuffer:=TxBufferEL, RxBuffer:=RxBufferEL);

// Receive data
ReceiveData();

// Send data
SendData();

]]></ST>
    </Implementation>
    <Method Name="ReceiveData" Id="{a1d1417a-4770-4ed6-b544-11e727bb2173}">
      <Declaration><![CDATA[METHOD ReceiveData : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE ReceiveStep OF
	0: 
		// On startup: start data receiving
		//ProcessVariableRead := TRUE;
		ReceiveStep := 1;
	1:
		// Read pressure measurement from controller
		fbAsciiComm.StartSend(SendStringIn := 'L2M?*', start := TRUE);
		IF fbAsciiComm.Received THEN
			pumpingPressureMeasurement := F_AsciiNumberConvert(fbAsciiComm.sReceivedString);  
			fbAsciiComm.StopSend(stop := TRUE);
			ReceiveStep := 2;
		END_IF
	2:
		// Read pressure setpoint value
		fbAsciiComm.StartSend(SendStringIn := 'L2S?*', start := TRUE);
		IF fbAsciiComm.Received THEN
			pumpingPressureSetpoint := F_AsciiNumberConvert(fbAsciiComm.sReceivedString); 
			fbAsciiComm.StopSend(stop := TRUE);
			ReceiveStep := 3;
		END_IF		
	3:
		// Read pressure controller output power
		fbAsciiComm.StartSend(SendStringIn := 'L2W?*', start := TRUE);
		IF fbAsciiComm.Received THEN
			pumpingPressureOutputPower := F_AsciiNumberConvert(fbAsciiComm.sReceivedString); 
			fbAsciiComm.StopSend(stop := TRUE);
			ReceiveStep := 4;
		END_IF
	4:
		// Read flow measurement from controller
		fbAsciiComm.StartSend(SendStringIn := 'L3M?*', start := TRUE);
		IF fbAsciiComm.Received THEN
			flowMeasurement := F_AsciiNumberConvert(fbAsciiComm.sReceivedString);  
			fbAsciiComm.StopSend(stop := TRUE);
			ReceiveStep := 5;
		END_IF
	5:
		// Read preheater measurement from controller
		fbAsciiComm.StartSend(SendStringIn := 'L4M?*', start := TRUE);
		IF fbAsciiComm.Received THEN
			preHeaterTemperatureMeasurement := F_AsciiNumberConvert(fbAsciiComm.sReceivedString);  
			fbAsciiComm.StopSend(stop := TRUE);
			ReceiveStep := 6;
		END_IF
	6:
		// Read preheater setpoint value
		fbAsciiComm.StartSend(SendStringIn := 'L4S?*', start := TRUE);
		IF fbAsciiComm.Received THEN
			preHeaterTemperatureSetpoint := F_AsciiNumberConvert(fbAsciiComm.sReceivedString); 
			fbAsciiComm.StopSend(stop := TRUE);
			ReceiveStep := 7;
		END_IF		
	7:
		// Read preheater controller output power
		fbAsciiComm.StartSend(SendStringIn := 'L4W?*', start := TRUE);
		IF fbAsciiComm.Received THEN
			preHeaterTemperatureOutputPower := F_AsciiNumberConvert(fbAsciiComm.sReceivedString); 
			fbAsciiComm.StopSend(stop := TRUE);
			ReceiveStep := 8;
		END_IF	
	8:
		// Read separator measurement from controller
		fbAsciiComm.StartSend(SendStringIn := 'L5M?*', start := TRUE);
		IF fbAsciiComm.Received THEN
			separatorTemperatureMeasurement := F_AsciiNumberConvert(fbAsciiComm.sReceivedString);  
			fbAsciiComm.StopSend(stop := TRUE);
			ReceiveStep := 9;
		END_IF
	9:
		// Read separator setpoint value
		fbAsciiComm.StartSend(SendStringIn := 'L5S?*', start := TRUE);
		IF fbAsciiComm.Received THEN
			separatorTemperatureSetpoint := F_AsciiNumberConvert(fbAsciiComm.sReceivedString); 
			fbAsciiComm.StopSend(stop := TRUE);
			ReceiveStep := 10;
		END_IF		
	10:
		// Read separator controller output power
		fbAsciiComm.StartSend(SendStringIn := 'L5W?*', start := TRUE);
		IF fbAsciiComm.Received THEN
			separatorTemperatureOutputPower := F_AsciiNumberConvert(fbAsciiComm.sReceivedString); 
			fbAsciiComm.StopSend(stop := TRUE);
			ReceiveStep := 0;
		END_IF
			
END_CASE
tonMessageUpdate(IN:=NOT (fbAsciiComm.bStringReceived), PT := T#2S);
rTrigMessageNotUpdated(CLK := tonMessageUpdate.Q);
IF rTrigMessageNotUpdated.Q THEN
	fbAsciiComm.StopSend(stop := TRUE);
	ReceiveStep := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SendData" Id="{c2d14a5a-3c02-453c-8582-99fffae2c5c3}">
      <Declaration><![CDATA[METHOD SendData : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Stop receiving data during send
IF pumpPressureStartSend OR preHeaterTemperatureStartSend OR separatorTemperatureStartSend THEN
	ReceiveStep := 0;
END_IF
// Update pressure setpoint
//IF PressureControl.ReactorPressureAutoPID THEN
//	pumpingPressureSentSetpoint := REAL_TO_DINT(PressureControl.ReactorPressurePIDcontrol.PIDy);
//	PressureControl.ReactorPressurePIDcontrol.PIDy;
//ELSE
	pumpingPressureSentSetpoint :=  pumpingPressureSetSetpoint;
//END_IF
fbUpdatePressureSetpoint(fbAsciiComm := fbAsciiComm, bStartSend := pumpPressureStartSend, sParameterCharacter := 'S', iValue := pumpingPressureSentSetpoint, iSlaveNo := 2);
IF pumpingPressureSentSetpoint <> pumpingPressureSetSetpointPrev THEN
	pumpPressureStartSend := TRUE;
	fbAsciiComm.StopSend(stop := TRUE);
	pumpingPressureSetSetpointPrev := pumpingPressureSentSetpoint;
	//ReceiveStep := 2;
END_IF
// Update preheater temperature setpoint
fbUpdatePreHeaterTemperatureSetpoint(fbAsciiComm := fbAsciiComm, bStartSend := preHeaterTemperatureStartSend, sParameterCharacter := 'S', iValue := preHeaterTemperatureSetSetpoint, iSlaveNo := 4);
IF preHeaterTemperatureSetSetpoint <> preHeaterTemperatureSetSetpointPrev THEN
	preHeaterTemperatureStartSend := TRUE;
	fbAsciiComm.StopSend(stop := TRUE);
	preHeaterTemperatureSetSetpointPrev := preHeaterTemperatureSetSetpoint;
	//ReceiveStep := 6;
END_IF
// Update preheater temperature setpoint
fbUpdateSeparatorTemperatureSetpoint(fbAsciiComm := fbAsciiComm, bStartSend := separatorTemperatureStartSend, sParameterCharacter := 'S', iValue := separatorTemperatureSetSetpoint, iSlaveNo := 5);
IF separatorTemperatureSetSetpoint <> separatorTemperatureSetSetpointPrev THEN
	separatorTemperatureStartSend := TRUE;
	fbAsciiComm.StopSend(stop := TRUE);
	separatorTemperatureSetSetpointPrev := separatorTemperatureSetSetpoint;
	//ReceiveStep := 10;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="SerialCommunicationHandler">
      <LineId Id="935" Count="0" />
      <LineId Id="676" Count="1" />
      <LineId Id="937" Count="0" />
      <LineId Id="936" Count="0" />
      <LineId Id="939" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="940" Count="0" />
      <LineId Id="942" Count="0" />
      <LineId Id="938" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="SerialCommunicationHandler.ReceiveData">
      <LineId Id="6" Count="92" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="SerialCommunicationHandler.SendData">
      <LineId Id="6" Count="35" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>