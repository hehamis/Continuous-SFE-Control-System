<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_SerialCom" Id="{92fac3c2-04a4-4fe0-9d6a-4fb77d279b78}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SerialCom
VAR_IN_OUT
	TxBuffer	: ComBuffer;
	RxBuffer	: ComBuffer;
END_VAR
VAR
	bStart		: BOOL;
	Timer		: TON := (PT:=T#150MS);
	fbSend		: SendString;
	bSendBusy	: BOOL;
	eSendErrorID: ComError_t;

	fbReceive		: ReceiveString;
	//sReceivedString	: STRING;
	sLastReceivedString: STRING;
	bStringReceived	: BOOL;
	bReceiveBusy	: BOOL;
	bReceiveError	: BOOL;
	eReceiveErrorID	: ComError_t;
	bReceiveTimeout	: BOOL;
	nReceiveCounter	: UDINT;
	
	fTrigReceiveBusy: F_TRIG;
	rTrigSendBusy: R_TRIG;
	sSendStringIn: STRING;
	started: BOOL;
	bStartTriggered : BOOL;
	rTrigStartTriggered: R_TRIG;
	startTimer: BOOL;
	asd: BOOL;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	sReceivedString	: STRING;
	Received : BOOL;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Call the send block every second to repeat the transmission.
// Also call the block as long as it is busy to finish a transmission.
rTrigStartTriggered(CLK := bStartTriggered);
IF rTrigStartTriggered.Q THEN
	startTimer := TRUE;
END_IF
Timer(IN:= startTimer );
IF Timer.Q OR fbSend.Busy THEN
	fbSend(	SendString:= sSendStringIn, // L2S#00300* set setpoint (30 celsius), L2SI* confirm,  L2M?* read temperature
			TXbuffer:= TxBuffer,
			Busy=> bSendBusy,
			Error=> );
	IF fbSend.Error <> COMERROR_NOERROR THEN
		eSendErrorID := fbSend.Error;
	END_IF
	startTimer := FALSE; (* reset timer *)
END_IF

//	Receive string data:
//	The block receives any data strings beginning with a STX ($02) and ending with an ETX ($03) character.	
fbReceive(
	Prefix:= 'L',
	Suffix:= '*',
	Timeout:= T#2s,
	ReceivedString:= sReceivedString,
	RXbuffer:= RxBuffer,
	StringReceived=> bStringReceived,
	Busy=> bReceiveBusy,
	Error=> ,
	RxTimeout=> bReceiveTimeout );
IF fbReceive.Error <> COMERROR_NOERROR THEN
	eReceiveErrorID := fbReceive.Error;
END_IF
IF bStringReceived THEN
	nReceiveCounter := nReceiveCounter + 1;
	sLastReceivedString := sReceivedString;
END_IF
fTrigReceiveBusy(CLK:=bReceiveBusy);
IF fTrigReceiveBusy.Q THEN
	Received := TRUE;
END_IF

]]></ST>
    </Implementation>
    <Method Name="StartSend" Id="{10ad1913-acdd-47d6-a7eb-bf6eb5832c7d}">
      <Declaration><![CDATA[METHOD StartSend : BOOL
VAR_INPUT
	start : BOOL;
	SendStringIn : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bStartTriggered := start;
sSendStringIn := SendStringIn;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StopSend" Id="{0c1b45a2-d0af-442c-a620-77a2a368e372}">
      <Declaration><![CDATA[METHOD StopSend : BOOL
VAR_INPUT
	stop : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF stop THEN
	bstart := FALSE;
	bStartTriggered := FALSE;
	Received := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SerialCom">
      <LineId Id="206" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="120" Count="2" />
      <LineId Id="42" Count="1" />
      <LineId Id="45" Count="6" />
      <LineId Id="167" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="54" Count="23" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SerialCom.StartSend">
      <LineId Id="35" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_SerialCom.StopSend">
      <LineId Id="28" Count="0" />
      <LineId Id="21" Count="3" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>