<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_LimitSwitch" Id="{0690f8f7-78f1-4d90-90bb-f1ba8dec2ee4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_LimitSwitch
VAR_INPUT
	I_LimitSwitch: BOOL;
	I_LowerLimit: BOOL;
	I_AlarmTimeSecs: INT;
END_VAR
VAR_OUTPUT
	O_LimitAlarm: BOOL;
END_VAR
VAR
	rTrigLimitReached: R_TRIG;
	fTrigLimitActive: F_TRIG;
	tonLimitAlarmTimer : TON;
	bLimitReached: BOOL;
	bLimitSwitch: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Logic for limit switches

// Flip boolean if the utilized switch is a lower limit switch (NORMALLY 'TRUE')
IF I_LowerLimit THEN
	bLimitSwitch := NOT I_LimitSwitch; 
ELSE
	bLimitSwitch := I_LimitSwitch;
END_IF

// Limit is reached
rTrigLimitReached(CLK:= bLimitSwitch);
fTrigLimitActive(CLK:= bLimitSwitch);
IF rTrigLimitReached.Q  THEN 
	bLimitReached := TRUE;
END_IF
IF fTrigLimitActive.Q THEN
	bLimitReached := FALSE;
END_IF

// When limit is exceeded, initialize timer for alarm. Resets if limit in normal state again
tonLimitAlarmTimer(IN:=bLimitReached, PT := INT_TO_TIME(I_AlarmTimeSecs)*1000);
O_LimitAlarm := tonLimitAlarmTimer.Q;
]]></ST>
    </Implementation>
    <LineIds Name="FB_LimitSwitch">
      <LineId Id="26" Count="21" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>