<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="ReactorTemperatureControl" Id="{e3e9f036-3c96-4afa-97ca-376e1dd7ea72}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ReactorTemperatureControl
VAR
	// HMI variables
	iTemperatureDisplayValue : INT;
	bTemperatureControlSwitch : BOOL;
	sTemperatureControlState : STRING(255);
	iTemperatureSetpoint : REAL;
	iTemperatureControlPercentage : INT;
	bPIDcontrolParameterMenu: BOOL; //Parameter menu switch
	// PID parameters
	rIprior: REAL := 0;
	rIterationtime: REAL := 6;
	reprior: REAL := 0;
	rPB: REAL :=9;
	rTi: REAL := 300;
	rTd: REAL := 90;
	rKp: REAL := 100/rPB;
	rKi: REAL := 1/rTi;
	rKd: REAL := 1/rTd;
	rBias: REAL := 0;
	// IO, HMI variables
	ryT: REAL; // Temperature measurement
	rspT: REAL; // Temperature setpoint
	buT: BOOL; // Temperature control (contactor)
	bTempCon: BOOL; // Temperature control mode (AUTO == 1, MAN == 0)
	//
	rontime: REAL;
	re: REAL;
	rI: REAL;
	// Cycle timer
	bCycleTimerStart : BOOL := 0;
	fbCycleTimer : TON; // EHKÄ TÄHÄN mielummin IN parametri kuin pT? uusi pt sitten koodissa aina? tai sitten kaikki inputit ja outputit tähän?
	// Ctrl timer
	bCtrlTimerStart : BOOL := 0;
	fbCtrlTimer : TON;	
	//
	rPIDypercentage: REAL;
	bAutomode: BOOL;
	bPercentageMode: BOOL;
	bContactorSwitch : BOOL;
	
	fbReactorTemperaturePIDControl: FB_PIDrelayOutput;
	iTemperatureLowerDisplayValue: INT;
END_VAR
VAR PERSISTENT
	iProportionalBand: INT;
	iIntegralTime: INT;
	iDerivativeTime: INT;
	iBias: INT;
	iCycleTime: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Avoid dividing by zero
IF iCycleTime <> 0 THEN
	rIterationTime := iCycleTime;
END_IF
IF iProportionalBand <> 0 THEN
	rPB := iProportionalBand;
END_IF
IF iIntegralTime <> 0 THEN
	rTi := iIntegralTime;
END_IF
IF iDerivativeTime <> 0 THEN
	rTd := iDerivativeTime;
END_IF
IF iBias <> 0 THEN
	rBias := iBias;
END_IF

// Temperature display value to HMI
iTemperatureDisplayValue := IO.iReactorTy/10;

// Lower temperature displau value to HMi
iTemperatureLowerDisplayValue := IO.iReactorTyLower/10;

//Temperature Control state
IF bTemperatureControlSwitch = 1 THEN
	sTemperatureControlState := 'AUTO';
END_IF
IF bTemperatureControlSwitch = 0 THEN
	sTemperatureControlState := 'MAN';
END_IF

// Read measurement values
// Temperature
ryT := INT_TO_FLOAT(in := IO.iReactorTy);
ryT := ryT/10;
rspT := iTemperatureSetpoint;
buT := IO.bReactorTu;
bTempCon := bTemperatureControlSwitch;

IF bTempCon OR iTemperatureControlPercentage > 0 THEN
	fbReactorTemperaturePIDControl(
		Iterationtime:= rIterationTime, 
		PB:= rPB, 
		Ti:= rTi, 
		Td:= rTd, 
		Kp:= rKp, 
		Ki:= rKi, 
		Kd:= rKd, 
		Bias:= rBias, 
		processVariable:= ryT, 
		setpoint:= rspT, 
		modeSelection:= bTempCon,
		iTemperatureControlPercentage := iTemperatureControlPercentage, 
		relayOn=> IO.bReactorTu);
END_IF

(*// Temperature PID control
//fbCtrlTimer(IN := bCtrlTimerStart,PT := REAL_TO_TIME(rontime*1000));
//fbCycleTimer(IN := bCycleTimerStart,PT := REAL_TO_TIME(rIterationtime*1000));
IF bTempCon = 1 THEN
	iTemperatureControlPercentage := 0;
	IF bCycleTimerStart = 0 THEN
		F_GetPIDOntime(rspT := rspT, ryT := ryT, rIprior := rIprior, riterationtime := riterationtime, reprior := reprior, rKp := rKp, rKi := rKi, rKd := rKd, rbias := rbias, rontime =>rontime, re => re, rI => rI);
		reprior := re;
		rIprior := rI;
		bCycleTimerStart := 1;
		bCtrlTimerStart := 1;
	ELSE
		F_ContactorControl(bCtrltimerQ := fbCtrlTimer.Q);
		IF fbCycleTimer.Q = 1 THEN
			bCycleTimerStart := 0;
			bCtrlTimerStart := 0;	
		END_IF
	END_IF
	bAutomode := 1;
	bPercentageMode := 0;
ELSE
	IF bAutomode THEN
		IO.bReactorTu := 0;
		bAutomode := 0;
	END_IF
	rPIDypercentage := INT_TO_REAL(HMI.iTemperatureControlPercentage)/100;
	IF rPIDypercentage > 0 THEN
		bPercentageMode := TRUE;
		rontime := F_PercentageToTime(rPIDypercentage := rPIDypercentage,rIterationtime := rIterationtime);
		IF FbCycleTimer.Q = 0 THEN
			bCycleTimerStart := 1;
			bCtrlTimerStart := 1;
			F_ContactorControl(bCtrltimerQ := fbCtrlTimer.Q);
		END_IF
			IF fbCycleTimer.Q = 1 THEN
				bCycleTimerStart := 0;
				bCtrlTimerStart := 0;	
			END_IF	
	ELSIF rPIDypercentage = 0 THEN
		IF IO.bReactorTu = 1 AND bPercentageMode THEN
			IO.bReactorTu := 0;
		END_IF
		bPercentageMode := FALSE;
	END_IF
END_IF
*)]]></ST>
    </Implementation>
    <LineIds Name="ReactorTemperatureControl">
      <LineId Id="132" Count="0" />
      <LineId Id="43" Count="14" />
      <LineId Id="134" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="60" Count="6" />
      <LineId Id="137" Count="0" />
      <LineId Id="67" Count="6" />
      <LineId Id="359" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="199" Count="9" />
      <LineId Id="257" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="74" Count="44" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>