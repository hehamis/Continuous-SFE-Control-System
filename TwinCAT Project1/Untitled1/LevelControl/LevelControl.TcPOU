<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="LevelControl" Id="{79bde8ae-6db5-4903-a256-e296e262a9d4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM LevelControl
VAR
	// HMI variables
	bLevelControlSwitch: BOOL; //Switch for level control	
	sLevelControlState: STRING(35); //Level control switch state in str
	sLevelValveState: STRING(35); //Valve state in str	
	
	//fbLevelControl			: FB_LevelControl;
	byH: BOOL;
	byL: BOOL;
	buL: BOOL;
	fbReactorUpperLimit: FB_LimitSwitch;
	fbReactorLowerLimit: FB_LimitSwitch;
	rtrigLevelControlAuto: R_TRIG;
	levelAutoControl: BOOL;
	PressureReference: DINT;
	fTrigLevelControlAuto: F_TRIG;

	PressureUpperInterval: INT;
	PressureLowerInterval: INT;
	intervalStep: INT;
	(*PressureUpperInterVal_1: INT;
	PressureUpperInterVal_2: INT;
	PressureLowerInterval_1: INT;
	PressureLowerInterval_2: INT;*)
	interValChanged: BOOL;
END_VAR
VAR PERSISTENT
	PressureUpperInterVal_1: INT;
	PressureUpperInterVal_2: INT;
	PressureLowerInterval_1: INT;
	PressureLowerInterval_2: INT;	
	PressureUpperInterVal_3: INT;
	PressureLowerInterval_3: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(*** Level Control mode HMI text***)
IF bLevelControlSwitch = 1 THEN
	sLevelControlState := 'AUTO';
END_IF
IF bLevelControlSwitch = 0 THEN
	sLevelControlState := 'MAN';
END_IF
(*** Level valve state ***)
IF IO.bReactorLu = 1 THEN
	sLevelValveState := 'CLOSE';
END_IF
IF IO.bReactorLu = 0 THEN
	sLevelValveState := 'OPEN';
END_IF

(*** Read measurement values ***)
// Level
byH := IO.bReactorHy;
byL := IO.bReactorLy;
buL := IO.bReactorLu;

(***Enter level auto control when selected from HMI***)
rtrigLevelControlAuto(CLK := bLevelControlSwitch);
fTrigLevelControlAuto(CLK := bLevelControlSwitch);
IF rTrigLevelControlAuto.Q THEN
	levelAutoControl := TRUE;
END_IF
IF fTrigLevelControlAuto.Q THEN // Close valve if auto control is exited
	levelAutoControl := FALSE;
	IO.bReactorLu := FALSE;
END_IF

(***If filling valve auto control is selected, automatically turn on outlet valve auto control ***)
IF PressureControl.fillingValveAutoMode AND io.bReactorFu THEN
	bLevelControlSwitch := TRUE;
ELSE
	bLevelControlSwitch := FALSE;
END_IF

(** Outlet valve control accorfing to pressure intervals ***)
// Set pressure reference according to setpoint
PressureReference := SerialCommunicationHandler.pumpingPressureSetpoint;//PressureControl.iPressureScaledValue;
IF PressureControl.fillingValveAutoMode THEN
	// Select pressure intervals according to lower limit sensor and filling valve state
	IF IO.bReactorLy and IO.bReactorFu THEN // If above lower limit and filling valve open
			PressureUpperInterval := PressureUpperInterval_1;
			PressureLowerInterval := PressureLowerInterval_1;
	ELSIF IO.bReactorLy AND NOT IO.bReactorFu THEN // If above lower limit and filling valve closed
			PressureUpperInterval := PressureUpperInterVal_3;
			PressureLowerInterval := PressureLowerInterval_3;		
	ELSE // If below lower limit
			PressureUpperInterval := PressureUpperInterVal_2;
			PressureLowerInterval := PressureLowerInterval_2;		
	END_IF	
	
	// Control outlet valve when intervals are exceeded
	IF PressureControl.iPressureScaledValue >= PressureReference + PressureUpperInterval THEN
		IO.bReactorLu := TRUE;
	ELSIF PressureControl.iPressureScaledValue <= PressureReference - PressureLowerInterval THEN
		IO.bReactorLu := FALSE;
	END_IF
	
	
END_IF





//IF fbReactorUpperLimit.O_LimitAlarm THEN

//Auto Control
(*IF HMI.bLevelControlSwitch THEN
	IF byL = 0 THEN
		IF IO.bReactorLu = 1 THEN
			IO.bReactorLu := 0;
		END_IF
	ELSIF byH = 1 THEN
		IF IO.bReactorLu = 0 THEN
			IO.bReactorLu := 1;
		END_IF
	// exit auto mode when filling 
	(*ELSIF byL = 0 AND byH = 0 THEN
		HMI.bLevelControlSwitch := 0;*)
	END_IF
END_IF*)]]></ST>
    </Implementation>
    <LineIds Name="LevelControl">
      <LineId Id="18" Count="20" />
      <LineId Id="129" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="104" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="288" Count="1" />
      <LineId Id="291" Count="1" />
      <LineId Id="290" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="349" Count="8" />
      <LineId Id="348" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="50" Count="16" />
      <LineId Id="17" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>