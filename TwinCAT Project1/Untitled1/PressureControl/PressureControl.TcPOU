<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="PressureControl" Id="{af9f6ef1-62a5-4326-9fa7-845cc278eb15}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PressureControl
VAR
	iPressureScaledValue: INT; //Scaled pressure value
	sFillingValveState: STRING; // Filling valve state in str
	fillingValveAutoMode: BOOL;
	sFillingValveControlState: STRING;
	toggleFillingValve : FB_ToggleHeartBeat;
	fTrigFillingAutoMode: F_TRIG;
	rTrigFillingAutoMode: R_TRIG;
	ReactorPressurePIDcontrol: FB_PIDsetpointOutput;
	tonPressureControl: TON;
	
	// PID params
	PB: REAL :=7;
	Ti: REAL := 10;
	Td: REAL := 1;
	Kp: REAL := 100/PB;
	Ki: REAL := 1/Ti;
	Kd: REAL := 1/Td;
	PressureTestValue: REAL;
	togglePressureControl: FB_ToggleHeartBeat;
	ReactorPressureAutoPID : BOOL;
	reactorPressureSetpoint: REAL;
END_VAR
VAR PERSISTENT
	fillingValveOpenInterval: INT;
	fillingValveCloseInterval: INT;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Scale analog pressure
iPressureScaledValue := F_AnalogScale(AnalogInputRawValue := IO.iReactorPy, MaxAnalogValue := 1000);
// Manual operation of filling valve: state texts
IF NOT io.bReactorFu THEN
	sFillingValveState := 'OPEN';
ELSE
	sFillingValveState := 'CLOSE';
END_IF

// Filling valve control mode and auto control
IF fillingValveAutoMode THEN
	sFillingValveControlState := 'AUTO';
	toggleFillingValve(I_OpenInterValSecs := fillingValveOpenInterval, I_CloseIntervalSecs := fillingValveCloseInterval, O_Update => io.bReactorFu);
ELSE
	sFillingValveControlState := 'MAN';
END_IF
// Open valve when auto mode is entered
rTrigFillingAutoMode(CLK := fillingValveAutoMode);
IF rTrigFillingAutoMode.Q THEN
	//toggleFillingValve.firstTime(entered := TRUE);
	io.bReactorFu := TRUE;
END_IF
// Close valve when auto mode is entered
fTrigFillingAutoMode(CLK := fillingValveAutoMode);
IF fTrigFillingAutoMode.Q THEN
	io.bReactorFu := FALSE;
END_IF


(*togglePressureControl(I_OpenInterValSecs:= 1,
					I_CloseIntervalSecs := ,
					)*)
IF ReactorPressureAutoPID THEN
	ReactorPressurePIDcontrol(
		Kp:= Kp, 
		Ki:= Ki, 
		Kd:= Kd, 
		Bias:=0 , 
		processVariable:= iPressureScaledValue,//PressureTestValue,
		setpoint:= reactorPressureSetpoint, 
		PIDy=> );
ELSE
	ReactorPressurePIDcontrol.ResetValues(TRUE);
END_IF

// PRESSURE PID CONTROL

]]></ST>
    </Implementation>
    <LineIds Name="PressureControl">
      <LineId Id="10" Count="6" />
      <LineId Id="5" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="43" Count="2" />
      <LineId Id="94" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="108" Count="3" />
      <LineId Id="73" Count="0" />
      <LineId Id="78" Count="5" />
      <LineId Id="68" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="46" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>